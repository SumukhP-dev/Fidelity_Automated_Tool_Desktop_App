#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

__author__ = "Eric Pruitt <eric.pruitt@gmail.com>"
__license__ = "2-Clause BSD"

import datetime
import decimal
import getopt
import getpass
import json
import os
import re
import shlex
import subprocess
import sys
import textwrap
import codecs

import coba

try:
    import readline
except ImportError:
    # No libreadline support :(
    pass

DEFAULT_CONFIGURATION_FILE = os.path.expanduser('~/.cobcli')

if not sys.stdout.isatty():
    sys.stdout = codecs.getwriter('utf8')(sys.stdout)
if not sys.stderr.isatty():
    sys.stderr = codecs.getwriter('utf8')(sys.stderr)


def parse_date(text):
    """
    Return a datetime.datetime instance representing the text. Relies on
    the GNU coreutils program "date".
    """
    numbers = {
        'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',
        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9', 'ten': '10',
        'eleven': '11', 'twelve': '12', 'thirteen': '13', 'fourteen': '14',
        'fifteen': '15', 'sixteen': '16', 'seventeen': '17', 'eighteen': '18',
        'nineteen': '19', 'twenty': '20'
    }

    # Reformulate string to make it easier for the date command to parse.
    tokens = re.findall(r"((?:[\d+-][\d:.+-]+|[^\W0-9]+|\d))", text.lower())
    tokens = (numbers.get(token, token) for token in tokens)
    text = ' '.join(
        (token for token in tokens if token.isdigit() or len(token) > 2))

    process = subprocess.Popen(["date", "--date", text, "+%Y %m %d"],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        env={'TZ': 'America/New_York'})
    stdout = process.stdout.read().strip()
    stderr = process.stderr.read().strip()

    if not stdout:
        message = stderr or ("Unable to parse date %r." % text)
        raise ValueError(message)

    return datetime.datetime(*map(int, stdout.split()))


def main():
    def search_accounts(terms, accounts=None, greedy=False):
        """
        Yield accounts whose names contain the search terms. If no search terms
        are provided, all accounts are returned. When `greedy` is enabled, any
        accounts that contain at least one of the search terms will be returned
        whereas without it, only accounts that contain all of the search terms
        are returned.
        """
        accounts = accounts or agent.accounts
        if not terms:
            return accounts

        if greedy:
            picker = any
        else:
            picker = all

        hits = list()
        for account in accounts:
            account_name_string = [account.name]
            if 'rewards_program' in account.attributes:
                account_name_string.append(account.rewards_program)

            subject = ' '.join(account_name_string).lower()
            if picker((term in subject for term in terms)):
                hits.append(account)

        return hits

    def list_accounts(*args):
        """
        List accounts with names and balances. This command accepts optional
        search terms as arguments, and accounts that contain any of the
        specified strings will be included in the output. When no search terms
        are provided, a balance is displayed below the unfiltered list of
        accounts. If one of the arguments is "deduct-pending", the most recent
        transactions of credit accounts will be inspected and any pending
        transactions will be used to adjust the balance which normally ignores
        pending transactions. This comes at a cost of speed.
        """
        if 'deduct-pending' in args:
            deduct_pending = True
            args = [arg for arg in args if arg != 'deduct-pending']
        else:
            deduct_pending = False

        values = list()
        for account in search_accounts(args):
            if isinstance(account, coba.ChaseDebitAccount):
                attr = (account, '', account.available_balance)
                values.append(account.available_balance)
            elif isinstance(account, coba.ChaseCreditAccount):
                if 'rewards_program' in account.attributes:
                    middle = account.rewards_program
                else:
                    middle = ''

                balance = account.current_balance
                if deduct_pending:
                    for transaction in account.transactions(maxpages=1):
                        if (transaction.date is None
                          or transaction.type == 'Pending'):
                            balance += transaction.amount

                attr = (account, middle, balance)
                values.append(-balance)

            print("%-27s  %-40s  %8s" % attr)

        if not args:
            print('---\n%-69s  %8s' % ('Balance:', sum(values)))

    def list_transactions(*args):
        """
        List transactions from accounts. This command accepts optional search
        terms as arguments, and accounts that contain any of the specified
        strings will have their transactions included in the output. When no
        search terms are provided, transactions from all accounts are shown. A
        date range can also be specified by passing in arguments starting with
        "from:" or "since:" for the starting date and "through:" or "to:" for
        the ending date. Because GNU date(1) is used for parsing the date, many
        common, human-readable forms of dates are accepted. Here are some
        examples:

        Show transactions from April 25th, 2013 through May 1st, 2013 in
        accounts that have "credit" in the name.

            ... from:2013-04-25 through:2013-05-01 credit

        Show transactions from one week ago through the present date; note that
        omitting an end date implies "through the current date" whereas
        omitting the start date implies "since the beginning of time":

            ... "from:one week ago"

        In addition to the date range selectors, minimum and maximum
        transaction amounts can be specified with the "min:" and "max:"
        prefixes respectively, and transaction names can be searched using the
        "contains:" prefix.

        To show transactions containing the text "target," the following
        command would be executed:

            ... contains:target

        And to show transactions between $25 and $100:

            ... min:25 max:100
        """
        # Assume anything with a comma in it is a date range and everything
        # else is a search term.
        terms = list()
        since = through = None
        lobound = hibound = None
        contains = None
        for arg in args:
            if arg.startswith(('from:', 'since:', 'through:', 'to:')):
                _, date_string = arg.split(':', 1)
                date = parse_date(date_string)
                if arg.startswith(('through:', 'to:')):
                    through = date
                else:
                    since = date

            elif arg.startswith('min:'):
                arg = arg.replace('$', '')
                _, lobound = arg.split(':', 1)
                lobound = decimal.Decimal(lobound)

            elif arg.startswith('max:'):
                arg = arg.replace('$', '')
                _, hibound = arg.split(':', 1)
                hibound = decimal.Decimal(hibound)

            elif arg.startswith('contains:'):
                _, contains = arg.split(':', 1)
                contains = contains.strip().lower()

            else:
                terms.append(arg)

        # Generate human-readable date range
        if since or through:
            rangemessage = 'Showing transactions'
            if since:
                rangemessage += ' since %s' % since.strftime('%B %d, %Y')
            if through:
                rangemessage += ' through %s' % through.strftime('%B %d, %Y')

        else:
            rangemessage = None

        # Normalize the transactions from the different account types
        now = datetime.datetime.now()
        displayed = list()
        for account in search_accounts(terms, greedy=True):
            transactions = account.transactions(since, through)

            if lobound is hibound is contains is None:
                displayed.extend(transactions)
            else:
                for transaction in transactions:
                    keep = True
                    if lobound is not None:
                        keep = keep and transaction.amount >= lobound
                    if keep and hibound is not None:
                        keep = keep and transaction.amount <= hibound
                    if keep and contains is not None:
                        keep = keep and contains in transaction.name.lower()

                    if keep:
                        displayed.append(transaction)

        if rangemessage:
            print(rangemessage)

        displayed.sort(key=lambda e: e.date or now)
        colform = "%-57s  %10s  %8s"
        for transaction in displayed:
            if transaction.date:
                date = transaction.date.strftime('%Y-%m-%d')
            else:
                date = 'Pending'

            print(colform % (transaction.name, date, transaction.amount))

    def parse_transfer_string(args, from_kw='from', to_kw='to', amounts=None):
        """
        Attempt to parse arguments for a transfer command into the amount,
        source account and destination account in the form of "(amount) from
        (source) to (destination)" where the "source" and "destination" are
        strings that qualify the account selected. The words "from" and "to"
        can be changed by adjusting the `from_km` and `to_kw` arguments
        respectively. In certain situations, an amount that is not a valid
        decimal may still need to be parsed as a valid value. These amounts can
        be supplied as list containing otherwise invalid values that should be
        permitted using the `amounts` keyword argument.
        """
        # Figure out the strings that represent the source, amount and
        # destination.
        from_ = list()
        to = None
        options = dict()
        for arg in args:
            arg = arg.lower()

            if 'amount' not in options:
                try:
                    options['amount'] = decimal.Decimal(arg)
                except decimal.InvalidOperation:
                    if amounts and arg in amounts:
                        options['amount'] = arg
                    else:
                        print('Invalid amount "%s".' % arg)

            else:
                if arg == from_kw:
                    continue
                elif arg == to_kw:
                    to = list()
                elif to is None:
                    from_.append(arg)
                else:
                    to.append(arg)

        # Exit if anything is invalid or unspecified.
        if not to:
            print('Unable to parse destination account.')
            return 1
        elif not 'amount' in options:
            print('Unable to parse currency amount.')
            return 1
        elif not from_:
            print('Unable to parse source account.')
            return 1

        # Figure out the accounts that match the substrings for the source and
        # destination.
        accounts = list(agent.accounts)
        source_account = search_accounts(from_, accounts=accounts)
        destination_account = search_accounts(to, accounts=accounts)

        # Make sure account selections are valid
        if not destination_account:
            print('No accounts matched the search terms for the destination.')
            return 1
        elif len(destination_account) > 1:
            print('Too many accounts matched destination search terms:')
            map(print, destination_account)
            return 1
        elif not source_account:
            print('No accounts matched the search terms for the source.')
            return 1
        elif len(source_account) > 1:
            print('Too many accounts matched source account search terms:')
            map(print, source_account)
            return 1
        elif destination_account == source_account:
            print('Destination and source cannot be the same accounts.')
            return 1

        return source_account[0], destination_account[0], options

    def transfer(*args):
        """
        Transfer money from one debit account to another. Takes the amount and
        search strings for the source and destination accounts as arguments in
        the following form. In the following example, $2000 is transferred from
        the account that contains "checking" in its name to the account the
        contains "saving" in its name:

            ... 2000 from checking to saving

        Multiple qualifiers can be added in the event that the search terms
        match more than one account. In this example below, $500 is transferred
        from a Chase Total Checking account to a Chase Premier Plus Checking
        account:

            ... 500 from premier checking to total checking
        """
        parsed = parse_transfer_string(args)
        if not parsed or isinstance(parsed, int):
            return parsed or 1
        else:
            source_account, destination_account, options = parsed

        print("Transferring %s from %s to %s." % (
            options['amount'], source_account, destination_account))

        if sys.stdin.isatty():
            if not raw_input('Proceed? (y/N) ').strip().startswith(('y', 'Y')):
                return 1

        amount = source_account.transfer_to(destination_account, **options)
        print('Transfer of $%s submitted.' % amount)

    def repay_credit(*args):
        """
        Pay off the balance of a credit account. Takes the amount and
        search strings for the source and destination accounts as arguments in
        the following form: (amount) on (destination) with (source). The amount
        can also be specified as "statement", "minimum", or "current" to pay
        off the previous statement balance, make the minimum payment or pay off
        the current balance respectively.

        In the following example, $500 is paid against the balance of the
        credit card containing the text "amazon" from the debit account
        containing the text "checking:"

            ... 500 on amazon with checking

        As with account transfers, multiple strings can be used as qualifiers
        to narrow down the selected account.
        """
        special_amounts = {
            'statement': coba.PAY_STATEMENT_BALANCE,
            'minimum': coba.PAY_MINIMUM_BALANCE,
            'current': coba.PAY_CURRENT_BALANCE,
        }

        parsed = parse_transfer_string(args, amounts=special_amounts,
            from_kw='on', to_kw='with')
        if not parsed or isinstance(parsed, int):
            return parsed or 1
        else:
            destination_account, source_account, options = parsed

        if options['amount'] in special_amounts:
            if options['amount'] == 'minimum':
                amount_text = 'minimum amount'
            else:
                amount_text = str(options['amount']) + ' balance'
            options['amount'] = special_amounts[options['amount']]
        else:
            amount_text = str(options['amount'])

        print("Paying %s on %s with %s." % (
            amount_text, destination_account, source_account))

        if sys.stdin.isatty():
            if not raw_input('Proceed? (y/N) ').strip().startswith(('y', 'Y')):
                return 1

        payment = destination_account.pay_from(source_account, **options)
        print('Payment of $%s submitted.' % payment)

    def details(*args):
        """
        List raw properties of an account or accounts. This command accepts
        optional search terms as arguments, and accounts that contain any of
        the specified strings will be included in the output. When no search
        terms are provided, the properties of all accounts are displayed.
        """
        accounts = search_accounts(args, accounts=list(agent.accounts))
        accounts.reverse()
        while accounts:
            account = accounts.pop()
            header = str(account)
            print(header + "\n" + '-' * len(header))
            for key, value in account.raw_attributes.iteritems():
                print("%-62s  %15s" % (key, value))

            if accounts:
                print('')


    # Map functions to command names
    dispatcher = {
        'accounts': list_accounts,
        'transactions': list_transactions,
        'transfer': transfer,
        'pay': repay_credit,
        'details': details,
    }

    try:
        options, tail = getopt.gnu_getopt(sys.argv[1:], 'f:c:h')
        if tail:
            raise ValueError("Unused arguments (%s)" % ', '.join(tail))

    except Exception as exc:
        print("Error parsing arguments: %s" % exc, file=sys.stderr)
        exit(1)

    optdict = dict(options)

    if '-h' in optdict:
        script = os.path.basename(sys.argv[0])
        print("%s [-f CONFIGURATION_FILE] [-c COMMAND]" % script)
        exit(0 if len(optdict) == 1 else 1)

    # Parse command string passed in with -c. Parsing follows POSIX shell
    # parsing rules, and multiple commands are separated with non-escaped
    # semicolons (;).
    if '-c' in optdict:
        # The shlex module simply uses "in" when parsing to check wordchars
        # membership, and I believe this is the simplest way to say "everything
        # that's not a quote character or whitespace is a 'word' character."
        # Could actually get away with defining a string with ASCII whitespace
        # and the quote characters since this program doesn't _need_ Unicode
        # support.
        class WordChars:
            def __contains__(self, member):
                return not re.match("\s|[\"';]", member, re.UNICODE)

        try:
            lexer = shlex.shlex(optdict['-c'], posix=True)
            lexer.wordchars = WordChars()
            tokens = list(lexer)
        except Exception as exc:
            print("Error parsing command string: %s" % exc, file=sys.stderr)
            exit(1)

        commandstack = list()
        argbuffer = list()

        for token in tokens:
            if (len(token) > 1 and token.startswith(("'", '"')) and
              token[0] == token[-1]):
                if token.startswith("'"):
                    argbuffer.append(token[1:-1])
                else:
                    argbuffer.append(token[1:-1].decode('string-escape'))

            elif token == ';':
                commandstack.append(argbuffer)
                argbuffer = list()

            else:
                argbuffer.append(token)

        if argbuffer:
            commandstack.append(argbuffer)

        commandstack.reverse()

    else:
        commandstack = None

    if '-f' not in optdict and os.path.exists(DEFAULT_CONFIGURATION_FILE):
        optdict['-f'] = DEFAULT_CONFIGURATION_FILE

    # Load configuration if a configuration file is supplied.
    if '-f' in optdict:
        with open(optdict['-f']) as iostream:
            kwargs = json.load(iostream)

        # Convert the "verification" key into an otp_type value.
        if "verification" in kwargs:
            verification = kwargs.pop('verification')
            if verification == "email":
                kwargs['otp_type'] = coba.EMAIL_VERIFICATION
            elif verification == "call":
                kwargs['otp_type'] = coba.CALL_VERIFICATION
            elif verification == "sms":
                kwargs['otp_type'] = coba.TEXT_MESSAGE_VERIFICATION
            else:
                print("Unrecognized verification type '%s'" % verification,
                    file=sys.stderr)
                exit(1)

    # Otherwise, prompt for the username and password.
    else:
        kwargs = {
            'username': raw_input('Username: '),
            'password': getpass.getpass(),
        }

    try:
        agent = coba.ChaseOnlineBankingAgent(**kwargs)
    except Exception as exc:
        print("Could not setup scraper interface: %s" % exc, file=sys.stderr)
        exit(1)

    status = 0
    while True:
        try:
            if commandstack:
                arguments = commandstack.pop()
            else:
                if sys.stdin.isatty():
                    userinput = raw_input('> ')
                else:
                    userinput = raw_input('')

                try:
                    arguments = shlex.split(userinput)
                except Exception as exc:
                    print('Error parsing command tokens: %s' % exc)
                    status = 1
                    continue

        except EOFError:
            if sys.stdout.isatty() and sys.stdin.isatty():
                print('')

            exit(status)

        except KeyboardInterrupt:
            print('')
            continue

        if arguments:
            command = arguments[0]
            options = arguments[1:]

            if command == 'help':
                if len(options) != 1 or options[0] == 'help':
                    print("Available actions:")
                    for action in dispatcher:
                        print("- %s" % action)

                    print('\nEnter "help" then an action name for more info.')

                else:
                    action = options[0]
                    if action not in dispatcher:
                        print('Unrecognized action "%s".' % action)
                        status = 1
                    else:
                        docstring = dispatcher[action].__doc__
                        if docstring:
                            docstring = docstring.replace('...', action)
                            print(textwrap.dedent(docstring).strip())
                            status = 0
                        else:
                            print('No help available for this action.')
                            status = 1

            else:
                try:
                    function = dispatcher[command]
                    try:
                        function(*options)
                        status = 0
                    except Exception as exc:
                        print('Error: %s' % exc)
                        status = 127

                except KeyError:
                    print('Command "%s" not recognized.' % command)
                    status = 1

            # When processing CLI commands, exit after the last command is
            # executed.
            if not commandstack and commandstack is not None:
                exit(status)


if __name__ == "__main__":
    main()
